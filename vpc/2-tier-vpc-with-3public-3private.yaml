AWSTemplateFormatVersion: '2010-09-09'
Description: 3-tier-vpc stack (3 AZs)
Metadata:
  TemplateGenerationDate: '2017-05-03 17:02:00.000000'
  Todo: /etc/hosts to include ip-x-x-x-x
  Author: Qamar Ali Shaikh x Github:ali-shaikh1190
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Ownership
      Parameters:
      - Owner
      - Project
    - Label:
        default: Network Configuration
      Parameters:
      - vpcCidr
      - publicSubnetACidr
      - publicSubnetBCidr
      - publicSubnetCCidr
      - privateSubnetACidr
      - privateSubnetBCidr
      - privateSubnetCCidr
    ParameterLabels:
      Owner:
        default: Team or Individual Owner
Parameters:
  Owner:
    Type: String
    Default: FirstName LastName
  Project:
    Type: String
    Default: My-Custom-VPC
  vpcCidr:
    Description: VPC CIDR block.
    Type: String
    Default: 10.90.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  publicSubnetACidr:
    Description: Public subnet A CIDR block.
    Type: String
    Default: 10.90.0.0/22
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
  publicSubnetBCidr:
    Description: Public subnet B CIDR block.
    Type: String
    Default: 10.90.4.0/22
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
  publicSubnetCCidr:
    Description: Public subnet C CIDR block.
    Type: String
    Default: 10.90.8.0/22
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
  privateSubnetACidr:
    Description: Private subnet A CIDR block.
    Type: String
    Default: 10.90.12.0/22
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
  privateSubnetBCidr:
    Description: Private subnet B CIDR block.
    Type: String
    Default: 10.90.16.0/22
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
  privateSubnetCCidr:
    Description: Private subnet C CIDR block.
    Type: String
    Default: 10.90.20.0/22
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'vpcCidr'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If [RegionIsUsEast1, ec2.internal, !Join ['', [!Ref 'AWS::Region',
            .compute.internal]]]
      DomainNameServers:
      - AmazonProvidedDNS
  VpcDhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'Vpc'
      DhcpOptionsId: !Ref 'DhcpOptions'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'publicSubnetACidr'
      AvailabilityZone: !Select ['0', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'publicSubnetBCidr'
      AvailabilityZone: !Select ['1', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'publicSubnetCCidr'
      AvailabilityZone: !Select ['2', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'privateSubnetACidr'
      AvailabilityZone: !Select ['0', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Private
        Key: Network
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'privateSubnetBCidr'
      AvailabilityZone: !Select ['1', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Private
        Key: Network
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'privateSubnetCCidr'
      AvailabilityZone: !Select ['2', !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Private
        Key: Network
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Value: !Ref 'AWS::StackName'
        Key: Application
      - Value: Public
        Key: Network
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetA'
      RouteTableId: !Ref 'PublicRouteTable'
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetB'
      RouteTableId: !Ref 'PublicRouteTable'
  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetC'
      RouteTableId: !Ref 'PublicRouteTable'
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetA'
      RouteTableId: !Ref 'PrivateRouteTableA'
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetB'
      RouteTableId: !Ref 'PrivateRouteTableB'
  PrivateSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetC'
      RouteTableId: !Ref 'PrivateRouteTableC'
  NatEipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatEipB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatEipC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      SubnetId: !Ref 'PublicSubnetA'
      AllocationId: !GetAtt [NatEipA, AllocationId]
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      SubnetId: !Ref 'PublicSubnetB'
      AllocationId: !GetAtt [NatEipB, AllocationId]
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      SubnetId: !Ref 'PublicSubnetC'
      AllocationId: !GetAtt [NatEipC, AllocationId]
  PublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  PrivateInternetRouteA:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref 'NatGatewayA'
      RouteTableId: !Ref 'PrivateRouteTableA'
      DestinationCidrBlock: 0.0.0.0/0
  PrivateInternetRouteB:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref 'NatGatewayB'
      RouteTableId: !Ref 'PrivateRouteTableB'
      DestinationCidrBlock: 0.0.0.0/0
  PrivateInternetRouteC:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref 'NatGatewayC'
      RouteTableId: !Ref 'PrivateRouteTableC'
      DestinationCidrBlock: 0.0.0.0/0
Outputs:
  Owner:
    Description: Team or Individual that Owns this Formation.
    Value: !Ref 'Owner'
  Project:
    Description: The project name
    Value: !Ref 'Project'
